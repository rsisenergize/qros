name: üöÄ Qros Multi-Environment CI/CD (Stable SSH Deployment)

on:
  push:
    branches:
      - main

jobs:
  # ===========================================================
  # 1Ô∏è‚É£ BUILD JOB
  # ===========================================================
  build:
    name: üß± Build Qros
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, intl, mysql, gd, exif, pcntl

      - name: üì¶ Install Composer Dependencies
        run: |
          mkdir -p bootstrap/cache
          chmod -R 777 bootstrap/cache
          composer install --no-dev --optimize-autoloader

      - name: üß∞ Build Frontend (Tailwind/NPM)
        run: |
          if [ -f package.json ]; then
            npm install
            npm run build || npm run prod || echo "‚ö†Ô∏è No npm build step found"
          fi

      - name: üîí Ensure proper permissions
        run: |
          chmod -R 775 storage bootstrap/cache

      - name: üìÅ Prepare Deployment Package
        run: |
          mkdir -p deploy
          echo "üì¶ Copying Laravel app to deploy directory..."
          tar --exclude='.git*' \
              --exclude='node_modules' \
              --exclude='tests' \
              --exclude='.env*' \
              --exclude='storage/app/public/*' \
              --exclude='storage/logs/*' \
              --exclude='storage/framework/*' \
              --exclude='public/uploads/*' \
              -cf - . | tar -xf - -C deploy
          echo "‚úÖ Copy complete."

      - name: üßæ Debug deploy contents
        run: |
          echo "=== Deploy folder contents ==="
          ls -la deploy | head -n 50
          echo "=== Check artisan existence ==="
          if [ -f deploy/artisan ]; then echo "‚úÖ Artisan found"; else echo "‚ùå Artisan missing"; exit 1; fi

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: qros_build
          path: deploy/

  # ===========================================================
  # 2Ô∏è‚É£ DEV DEPLOYMENT (Auto)
  # ===========================================================
  deploy-dev:
    name: üå± Deploy to Dev
    runs-on: ubuntu-latest
    needs: build
    environment: dev

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: qros_build
          path: build/

      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîê Copy Dev Environment File
        run: |
          mkdir -p build
          cp .env.dev build/.env

      - name: üöÄ Upload via SSH (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build/."
          target: ${{ secrets.DEPLOY_PATH_DEV }}

      - name: üß† Run Laravel Commands (Dev)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH_DEV }}
            if [ ! -f artisan ]; then echo "‚ùå Artisan not found"; exit 1; fi
            chmod -R 775 storage bootstrap/cache
            php artisan storage:link || true
            php artisan migrate --force || (php artisan migrate:rollback && exit 1)
            php artisan optimize:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

  # ===========================================================
  # 3Ô∏è‚É£ TEST DEPLOYMENT (Manual Approval)
  # ===========================================================
  deploy-test:
    name: üß™ Deploy to Test
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment:
      name: test
      url: https://test.qros.in

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: qros_build
          path: build/

      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîê Copy Test Environment File
        run: |
          mkdir -p build
          cp .env.test build/.env

      - name: üöÄ Upload via SSH (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build/."
          target: ${{ secrets.DEPLOY_PATH_TEST }}

      - name: üß† Run Laravel Commands (Test)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH_TEST }}
            chmod -R 775 storage bootstrap/cache
            php artisan storage:link || true
            php artisan migrate --force || (php artisan migrate:rollback && exit 1)
            php artisan optimize:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

  # ===========================================================
  # 4Ô∏è‚É£ PREPROD DEPLOYMENT (Manual Approval)
  # ===========================================================
  deploy-preprod:
    name: üöÄ Deploy to Preprod
    runs-on: ubuntu-latest
    needs: deploy-test
    environment:
      name: preprod
      url: https://preprod.qros.in

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: qros_build
          path: build/

      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîê Copy Preprod Environment File
        run: |
          mkdir -p build
          cp .env.preprod build/.env

      - name: üöÄ Upload via SSH (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build/."
          target: ${{ secrets.DEPLOY_PATH_PREPROD }}

      - name: üß† Run Laravel Commands (Preprod)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH_PREPROD }}
            chmod -R 775 storage bootstrap/cache
            php artisan storage:link || true
            php artisan migrate --force || (php artisan migrate:rollback && exit 1)
            php artisan optimize:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

  # ===========================================================
  # 5Ô∏è‚É£ PRODUCTION DEPLOYMENT (Manual Final Approval)
  # ===========================================================
  deploy-prod:
    name: üèÅ Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-preprod
    environment:
      name: production
      url: https://qros.in

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: qros_build
          path: build/

      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîê Copy Production Environment File
        run: |
          mkdir -p build
          cp .env.prod build/.env

      - name: üöÄ Upload via SSH (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build/."
          target: ${{ secrets.DEPLOY_PATH_PROD }}

      - name: üß† Run Laravel Commands (Production)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH_PROD }}
            chmod -R 775 storage bootstrap/cache
            php artisan storage:link || true
            php artisan migrate --force || (php artisan migrate:rollback && exit 1)
            php artisan optimize:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
